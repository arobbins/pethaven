//
// Grid
//
@mixin create-col($cols, $margin) {

  @if($cols == 1) {
    flex: 1 1 auto;
    width: 100%;
    max-width: 100%;

  } @else {
    flex: 0 0 calc((100% / #{$cols}) - #{$margin});
    max-width: calc((100% / #{$cols}) - #{$margin});
    width: calc((100% / #{$cols}) - #{$margin});
  }

}

//
// Grid
//
@mixin shadow() {
  box-shadow: 0px 7px 24px -5px rgba(0,0,0,0.75);
}

@mixin shadow-subtle() {
  box-shadow: 0px 0px 11px -5px rgba(15,15,15,1);
  // box-shadow: 0 0 56px -12px rgba(0, 0, 0, 0.38);
}

@mixin spinner() {
  border-left: 6px solid transparentize(color(highlight), 0.8);
  border-right: 6px solid transparentize(color(highlight), 0.8);
  border-bottom: 6px solid transparentize(color(highlight), 0.8);
  border-top: 6px solid color(highlight);
  position: absolute;
  margin: 0 auto;
  height: 60px;
  width: 60px;
  border-radius: 100%;
}

@mixin rotate() {
  animation: rotate $speed-slow infinite linear;
}


//
// Breakpoints
//
@mixin respond-to($breakpoint, $size) {
  @if map-has-key($breakpoints, $breakpoint) {
    @if($size == 'max') {
      @media (max-width: #{map-get($breakpoints, $breakpoint)}) {
        @content;
      }
    } @else {
      @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
        @content;
      }
    }
  }

  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

//
// Dim
//
@mixin dim {
  transition: opacity 0.5 ease;

  &:hover {
    opacity: 0.7;
  }
}


//
// Dim
//
@mixin dim-subtle {
  // transition: opacity 0.5 ease;

  &:hover {
    opacity: 0.85;
  }
}


@mixin is-closer {
  @extend .transition-fast;

  &:hover {
    transform: scale(1.06);
    z-index: 999;
  }

}


//
// Mobile menu icon
//
@mixin mobile-menu-icon {
  display: none;
  width: 50px;
  height: 40px;
  position: relative;
  margin: 0 1em 0;
  -webkit-transform: rotate(0deg);
  -moz-transform: rotate(0deg);
  -o-transform: rotate(0deg);
  transform: rotate(0deg);
  -webkit-transition: .5s ease-in-out;
  -moz-transition: .5s ease-in-out;
  -o-transition: .5s ease-in-out;
  transition: .5s ease-in-out;
  cursor: pointer;

  span {
    display: block;
    position: absolute;
    height: 4px;
    width: 50%;
    background: color(red);
    opacity: 1;
    -webkit-transform: rotate(0deg);
    -moz-transform: rotate(0deg);
    -o-transform: rotate(0deg);
    transform: rotate(0deg);
    -webkit-transition: .25s ease-in-out;
    -moz-transition: .25s ease-in-out;
    -o-transition: .25s ease-in-out;
    transition: .25s ease-in-out;

    &:nth-child(even) {
      left: 50%;
      border-radius: 0 9px 9px 0;
    }

    &:nth-child(odd) {
      left:0px;
      border-radius: 9px 0 0 9px;
    }

    &:nth-child(1), &:nth-child(2) {
      top: 0px;
    }

    &:nth-child(3), &:nth-child(4) {
      top: 15px;
    }

    &:nth-child(5), &:nth-child(6) {
      top: 31px;
    }

  }

  &.is-open span:nth-child(1),
  &.is-open span:nth-child(6) {
    -webkit-transform: rotate(45deg);
    -moz-transform: rotate(45deg);
    -o-transform: rotate(45deg);
    transform: rotate(45deg);
  }

  &.is-open span:nth-child(2),
  &.is-open span:nth-child(5) {
    -webkit-transform: rotate(-45deg);
    -moz-transform: rotate(-45deg);
    -o-transform: rotate(-45deg);
    transform: rotate(-45deg);
  }

  &.is-open span:nth-child(1) {
    left: 5px;
    top: 7px;
  }

  &.is-open span:nth-child(2) {
    left: calc(50% - 5px);
    top: 7px;
  }

  &.is-open span:nth-child(3) {
    left: -50%;
    opacity: 0;
  }

  &.is-open span:nth-child(4) {
    left: 100%;
    opacity: 0;
  }

  &.is-open span:nth-child(5) {
    left: 5px;
    top: 23px;
  }

  &.is-open span:nth-child(6) {
    left: calc(50% - 5px);
    top: 23px;
  }

  @include respond-to(500, 'max') {
    display: block;
  }
}
